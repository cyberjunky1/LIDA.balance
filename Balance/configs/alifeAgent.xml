<?xml version="1.0" encoding="UTF-8"?><!--    Copyright (c) 2009, 2011 The University of Memphis.  All rights reserved.     This program and the accompanying materials are made available     under the terms of the LIDA Software Framework Non-Commercial License v1.0     which accompanies this distribution, and is available at    http://ccrg.cs.memphis.edu/assets/papers/2010/LIDA-framework-non-commercial-v1.0.pdf --><lida xmlns="http://ccrg.cs.memphis.edu/LidaXMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"    xsi:schemaLocation="http://ccrg.cs.memphis.edu/LidaXMLSchema LidaXMLSchema.xsd ">  <taskmanager>    <param name="taskManager.tickDuration" type="int">1 </param>    <param name="taskManager.maxNumberOfThreads" type="int">100</param>  </taskmanager>  <taskspawners>    <taskspawner name="defaultTS">      <class>edu.memphis.ccrg.lida.framework.tasks.TaskSpawnerImpl</class>    </taskspawner>  </taskspawners>    <submodules>     <module name="Environment">      <class>com.serotonin.lida.balance.Environment</class>      <taskspawner>defaultTS</taskspawner>    </module>        <module name="SensoryMemory">      <class>com.serotonin.lida.balance.SensoryMemory</class>      <associatedmodule>Environment</associatedmodule>      <taskspawner>defaultTS</taskspawner>      <initialTasks>        <task name="backgroundTask">          <tasktype>SensoryMemoryBackgroundTask</tasktype>          <ticksperrun>1</ticksperrun>        </task>      </initialTasks>    </module>        <module name="PerceptualAssociativeMemory">      <class>edu.memphis.ccrg.lida.pam.PerceptualAssociativeMemoryImpl</class>      <param name="pam.upscale" type="double">0.9</param>      <param name="pam.downscale" type="double">0.5</param>      <param name="pam.perceptThreshold" type="double">0.7</param>      <param name="pam.excitationTicksPerRun" type="int">1</param>      <param name="pam.propagationTicksPerRun" type="int">1</param>      <param name="pam.propagateActivationThreshold" type="double">0.05</param>      <param name="nodes">          upright,fallingLeft,fallingRight,fallenLeft,fallenRight,          falling,fallen      </param>      <param name="links">          fallingLeft:falling,fallingRight:falling,          fallenLeft:fallen,fallenRight:fallen      </param>      <taskspawner>defaultTS</taskspawner>      <initialTasks>        <task name="AngleDetector">          <tasktype>AngleDetector</tasktype>          <ticksperrun>3</ticksperrun>          <param name="nodes" type="string">upright,fallingLeft,fallingRight,fallenLeft,fallenRight</param>        </task>      </initialTasks>      <initializerclass>edu.memphis.ccrg.lida.pam.BasicPamInitializer</initializerclass>    </module>        <module name="Workspace">      <class>edu.memphis.ccrg.lida.workspace.WorkspaceImpl</class>      <submodules>        <module name="PerceptualBuffer">          <class>edu.memphis.ccrg.lida.workspace.workspacebuffers.WorkspaceBufferImpl</class>          <taskspawner>defaultTS</taskspawner>        </module>        <module name="CurrentSituationalModel">          <class>edu.memphis.ccrg.lida.workspace.workspacebuffers.WorkspaceBufferImpl</class>          <taskspawner>defaultTS</taskspawner>        </module>        <module name="BroadcastQueue">          <class>edu.memphis.ccrg.lida.workspace.workspacebuffers.BroadcastQueueImpl</class>          <param name="workspace.broadcastQueueCapacity" type="int">20</param>          <taskspawner>defaultTS</taskspawner>        </module>      </submodules>      <taskspawner>defaultTS</taskspawner>      <initialTasks>        <task name="UpdateCsmBackgroundTask">          <tasktype>UpdateCsmBackgroundTask</tasktype>          <ticksperrun>5</ticksperrun>        </task>      </initialTasks>    </module>        <module name="AttentionModule">      <class>edu.memphis.ccrg.lida.attentioncodelets.AttentionCodeletModule</class>      <associatedmodule>Workspace</associatedmodule>      <associatedmodule>GlobalWorkspace</associatedmodule>      <param name="attentionModule.defaultCodeletType">NeighborhoodAttentionCodelet</param>      <param name="attentionModule.codeletActivation" type="double">1.0</param>      <param name="attentionModule.codeletRemovalThreshold" type="double">-1.0</param>      <param name="attentionModule.codeletReinforcement" type="double">0.1</param>      <taskspawner>defaultTS</taskspawner>      <initialTasks>        <task name="FallingLeftAttentionCodelet">          <tasktype>NeighborhoodAttentionCodelet</tasktype>          <ticksperrun>5</ticksperrun>          <param name="nodes" type="string">fallingLeft</param>          <param name="refractoryPeriod" type="int">50</param>          <param name="learnable.baseLevelActivation" type="double">1.0</param>        </task>        <task name="FallingRightAttentionCodelet">          <tasktype>NeighborhoodAttentionCodelet</tasktype>          <ticksperrun>5</ticksperrun>          <param name="nodes" type="string">fallingRight</param>          <param name="refractoryPeriod" type="int">50</param>          <param name="learnable.baseLevelActivation" type="double">1.0</param>        </task>        <task name="FallenLeftAttentionCodelet">          <tasktype>NeighborhoodAttentionCodelet</tasktype>          <ticksperrun>5</ticksperrun>          <param name="nodes" type="string">fallenLeft</param>          <param name="refractoryPeriod" type="int">50</param>          <param name="learnable.baseLevelActivation" type="double">1.0</param>        </task>        <task name="FallenRightAttentionCodelet">          <tasktype>NeighborhoodAttentionCodelet</tasktype>          <ticksperrun>5</ticksperrun>          <param name="nodes" type="string">fallenRight</param>          <param name="refractoryPeriod" type="int">50</param>          <param name="learnable.baseLevelActivation" type="double">1.0</param>        </task>      </initialTasks>    </module>    <module name="GlobalWorkspace">      <class>edu.memphis.ccrg.lida.globalworkspace.GlobalWorkspaceImpl</class>      <param name="globalWorkspace.coalitionRemovalThreshold" type="double">0.0</param>      <param name="globalWorkspace.coalitionDecayStrategy">coalitionDecay</param>      <param name="globalWorkspace.refractoryPeriod" type="int">40 </param>      <!-- Trigger parameters -->      <param name="globalWorkspace.delayNoBroadcast" type="int">100 </param>      <param name="globalWorkspace.delayNoNewCoalition" type="int">50 </param>      <param name="globalWorkspace.aggregateActivationThreshold" type="double">2.0</param>      <param name="globalWorkspace.individualActivationThreshold" type="double">0.9</param>      <taskspawner>defaultTS</taskspawner>      <initializerclass>edu.memphis.ccrg.lida.globalworkspace.GlobalWorkspaceInitializer</initializerclass>    </module>     <module name="ProceduralMemory">      <class>edu.memphis.ccrg.lida.proceduralmemory.ProceduralMemoryImpl</class>      <param name="proceduralMemory.ticksPerStep" type="int">14</param>      <param name="proceduralMemory.conditionDecayStrategy">conditionDecay</param>      <param name="proceduralMemory.schemeSelectionThreshold" type="double">0.1</param>      <param name="proceduralMemory.contextWeight" type="double">1.0</param>      <param name="proceduralMemory.addingListWeight"  type="double">1.0</param>      <param name="proceduralMemory.schemeClass">edu.memphis.ccrg.lida.proceduralmemory.SchemeImpl</param>            <param name="scheme.1L">if falling left impulse right|(fallingLeft)()|action.impulseRight|()()|0.01</param>      <param name="scheme.1R">if falling right impulse left|(fallingRight)()|action.impulseLeft|()()|0.01</param>            <param name="scheme.2L">if fallen left impulse right|(fallenLeft)()|action.impulseRight|()()|0.05</param>      <param name="scheme.2R">if fallen right impulse left|(fallenRight)()|action.impulseLeft|()()|0.05</param>      <taskspawner>defaultTS</taskspawner>                            <initializerclass>edu.memphis.ccrg.lida.proceduralmemory.BasicProceduralMemoryInitializer</initializerclass>    </module>    <module name="ActionSelection">      <class>edu.memphis.ccrg.lida.actionselection.behaviornetwork.BehaviorNetwork</class>      <param name="actionselection.broadcastExcitationFactor" type="double">0.05</param>      <param name="actionselection.successorExcitationFactor" type="double">0.04</param>      <param name="actionselection.conflictorExcitationFactor" type="double">0.04</param>      <param name="actionselection.predecessorExcitationFactor" type="double">0.1</param>      <param name="actionselection.contextSatisfactionThreshold" type="double">0.5</param>      <param name="actionselection.initialCandidateThreshold" type="double">1.0</param>      <param name="actionselection.candidateThresholdDecayName" type="string">defaultDecay</param>      <param name="actionselection.behaviorDecayName" type="string">behaviorDecay</param>                   <taskspawner>defaultTS</taskspawner>    </module>    <module name="SensoryMotorMemory">      <class>edu.memphis.ccrg.lida.sensorymotormemory.BasicSensoryMotorMemory</class>      <associatedmodule>Environment</associatedmodule>                  <param name="smm.processActionTaskTicks" type="int">1</param>            <param name="smm.mapping.1">action.impulseRight,algorithm.impulseRight</param>      <param name="smm.mapping.2">action.impulseLeft,algorithm.impulseLeft</param>      <taskspawner>defaultTS</taskspawner>      <initializerclass>edu.memphis.ccrg.lida.sensorymotormemory.BasicSensoryMotorMemoryInitializer</initializerclass>    </module>  </submodules>  <listeners>    <listener>      <listenertype>edu.memphis.ccrg.lida.pam.PamListener</listenertype>      <modulename>PerceptualAssociativeMemory</modulename>      <listenername>Workspace</listenername>    </listener>    <listener>      <listenertype>edu.memphis.ccrg.lida.workspace.WorkspaceListener</listenertype>      <modulename>Workspace</modulename>      <listenername>PerceptualAssociativeMemory</listenername>    </listener>    <listener>      <listenertype>edu.memphis.ccrg.lida.globalworkspace.BroadcastListener</listenertype>      <modulename>GlobalWorkspace</modulename>      <listenername>PerceptualAssociativeMemory</listenername>    </listener>    <listener>      <listenertype>edu.memphis.ccrg.lida.globalworkspace.BroadcastListener</listenertype>      <modulename>GlobalWorkspace</modulename>      <listenername>Workspace</listenername>    </listener>    <listener>      <listenertype>edu.memphis.ccrg.lida.globalworkspace.BroadcastListener</listenertype>      <modulename>GlobalWorkspace</modulename>      <listenername>ProceduralMemory</listenername>    </listener>    <listener>      <listenertype>edu.memphis.ccrg.lida.proceduralmemory.ProceduralMemoryListener</listenertype>      <modulename>ProceduralMemory</modulename>      <listenername>ActionSelection</listenername>    </listener>    <listener>      <listenertype>edu.memphis.ccrg.lida.actionselection.ActionSelectionListener</listenertype>      <modulename>ActionSelection</modulename>      <listenername>SensoryMotorMemory</listenername>    </listener>  </listeners></lida>